{"version":3,"file":"static/js/46.c2f98185.chunk.js","mappings":"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","sources":["components/User/UserSign.jsx","pages/Sign.jsx","utils/User/userValidation.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport InputTextDesc from \"./InputTextDesc\";\r\nimport {\r\n  UserFormGroup,\r\n  InputTextLabel,\r\n  InputTextGroup,\r\n  TextLabel,\r\n  CheckInput,\r\n  LinkGroup,\r\n} from \"./LoginStyle\";\r\nimport Button from \"../../share/Button\";\r\nimport {\r\n  checkValidityId,\r\n  checkValidityPassword,\r\n  checkDoublePassword,\r\n  checkValidityNickname,\r\n} from \"../../utils/User/userValidation\";\r\n\r\nimport axios from \"axios\";\r\n\r\nexport default function UserSign() {\r\n  let navigate = useNavigate();\r\n  const [usrInputs, setUsrInputs] = useState({\r\n    id: \"\",\r\n    password: \"\",\r\n    checkPassword: \"\",\r\n    nickname: \"\",\r\n    isAgree: false,\r\n  });\r\n\r\n  const { id, password, checkPassword, nickname, isAgree } = usrInputs;\r\n\r\n  const handleChange = (e) => {\r\n    const { value, name } = e.target; // 우선 e.target 에서 name 과 value 를 추출\r\n    setUsrInputs({\r\n      ...usrInputs, // 기존의 input 객체를 복사한 뒤\r\n      [name]: value, // name 키를 가진 값을 value 로 설정\r\n    });\r\n  };\r\n\r\n  const handleIsAgree = (e) => {\r\n    const { checked, name } = e.target;\r\n\r\n    setUsrInputs({\r\n      ...usrInputs,\r\n      [name]: checked,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!isAgree) {\r\n      return alert(\"동의 해주세요.\");\r\n    }\r\n\r\n    if (\r\n      true\r\n      // checkValidityId(id)[0] &&\r\n      // checkValidityPassword(password)[0] &&\r\n      // checkDoublePassword(password, checkPassword)[0] &&\r\n      // checkValidityNickname(nickname)[0]\r\n    ) {\r\n      const myData = {\r\n        loginId: id,\r\n        password: password,\r\n        passwordCheck: checkPassword,\r\n        nickName: nickname,\r\n      };\r\n\r\n      axios\r\n        .post(\"/api/user/join\", myData)\r\n        .then(function (response) {\r\n          if (\r\n            response.data.status === \"0500\" || //서버에서 예외처리 작업 후 제거예정\r\n            response.data.status === \"0403\" ||\r\n            response.data.status === \"0404\"\r\n          ) {\r\n            alert(response.data.message);\r\n          } else {\r\n            alert(\"회원가입 성공\");\r\n            navigate(\"/login\");\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          alert(\"회원가입이 실패하였습니다.\");\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <UserFormGroup onSubmit={handleSubmit} style={{ height: \"510px\" }}>\r\n      <InputTextGroup>\r\n        <InputTextLabel>아이디</InputTextLabel>\r\n        <InputTextDesc\r\n          type=\"text\"\r\n          name=\"id\"\r\n          placeholder=\"아이디 5~12자 입력\"\r\n          onChange={handleChange}\r\n          onValidation={checkValidityId}\r\n          required\r\n        />\r\n      </InputTextGroup>\r\n      <InputTextGroup>\r\n        <InputTextLabel>비밀번호</InputTextLabel>\r\n        <InputTextDesc\r\n          type=\"password\"\r\n          name=\"password\"\r\n          placeholder=\"비밀번호 8~16자, 숫자, 특수문자 포함\"\r\n          onChange={handleChange}\r\n          onValidation={checkValidityPassword}\r\n          required\r\n        />\r\n        <InputTextDesc\r\n          type=\"password\"\r\n          name=\"checkPassword\"\r\n          placeholder=\"비밀번호 재입력\"\r\n          onChange={handleChange}\r\n          onValidation={(value) => checkDoublePassword(value, password)}\r\n          required\r\n        />\r\n      </InputTextGroup>\r\n      <InputTextGroup>\r\n        <InputTextLabel>닉네임</InputTextLabel>\r\n        <InputTextDesc\r\n          type=\"text\"\r\n          name=\"nickname\"\r\n          placeholder=\"닉네임 입력\"\r\n          onChange={handleChange}\r\n          onValidation={checkValidityNickname}\r\n          required\r\n        />\r\n      </InputTextGroup>\r\n      <CheckInput>\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"agree\"\r\n          checked={isAgree}\r\n          name=\"isAgree\"\r\n          onChange={handleIsAgree}\r\n        />\r\n        <TextLabel htmlFor=\"agree\">\r\n          이용약관 및 개인정보 수집∙이용에 동의합니다.\r\n        </TextLabel>\r\n      </CheckInput>\r\n      <Button size=\"lg\" type=\"submit\">\r\n        가입하기\r\n      </Button>\r\n\r\n      <LinkGroup>\r\n        <Link to=\"/login\">\r\n          <TextLabel>로그인</TextLabel>\r\n        </Link>\r\n      </LinkGroup>\r\n    </UserFormGroup>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Title from \"../utils/Title/Title\";\r\nimport Nav from \"../components/Navbar/index\";\r\nimport UserSign from \"../components/User/UserSign\";\r\nimport {\r\n  SnsSelectTab,\r\n  SNSGroup,\r\n  GroupItem,\r\n} from \"../components/User/SnsLogin/SnsSelectTab\";\r\nimport { WidthAreaSpace } from \"../styles/Layout/Layout\";\r\nimport { SnsLogin } from \"../components/User/SnsLogin/SnsLogin\";\r\nimport {\r\n  ContentBackgroud,\r\n  ContentContainer,\r\n  LoginContainerArea,\r\n} from \"../components/User/LoginStyle\";\r\n\r\nfunction Sign() {\r\n  const [selected, setSelected] = useState(\"emaillogin\");\r\n  return (\r\n    <>\r\n      <Title name=\"Sign\" />\r\n      <Nav />\r\n      <WidthAreaSpace>\r\n        <ContentBackgroud>\r\n          <ContentContainer>\r\n            <LoginContainerArea>\r\n              <SnsSelectTab\r\n                onChange={(name) => {\r\n                  setSelected(name);\r\n                }}\r\n                typeName={selected}\r\n                text={\"가입\"}\r\n              />\r\n              <SNSGroup selected={selected}>\r\n                <GroupItem name=\"emaillogin\">\r\n                  <UserSign />\r\n                </GroupItem>\r\n                <GroupItem name=\"snslogin\">\r\n                  <SnsLogin />\r\n                </GroupItem>\r\n              </SNSGroup>\r\n            </LoginContainerArea>\r\n          </ContentContainer>\r\n        </ContentBackgroud>\r\n      </WidthAreaSpace>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Sign;\r\n","export const checkValidityId = (id) => {\r\n  if (id.length < 5) {\r\n    return [false, \"5~12자를 입력하세요\"];\r\n  } else if (id.length > 12) {\r\n    return [false, \"5~12자를 입력하세요\"];\r\n  } else {\r\n    if (isRuleId(id)) {\r\n      return [true, \"사용 가능\"];\r\n    }\r\n    return [false, \"사용 불가능\"];\r\n  }\r\n};\r\n\r\nexport const checkValidityPassword = (password) => {\r\n  if (password.length < 8) {\r\n    return [false, \"숫자, 특수문자 포함\"];\r\n  } else if (password.length > 16) {\r\n    return [false, \"숫자, 특수문자 포함\"];\r\n  } else {\r\n    if (isRulePassword(password)) {\r\n      return [true, \"사용 가능\"];\r\n    }\r\n    return [false, \"사용 불가능\"];\r\n  }\r\n};\r\n\r\nexport const checkDoublePassword = (target, value) => {\r\n  if (value !== target) {\r\n    return [false, \"비밀번호 불일치\"];\r\n  } else {\r\n    return [true, \"사용 가능\"];\r\n  }\r\n};\r\n\r\nexport const checkValidityNickname = (nickname) => {\r\n  if (nickname.length < 2) {\r\n    return [false, \"2~10자를 입력하세요\"];\r\n  } else if (nickname.length > 10) {\r\n    return [false, \"2~10자를 입력하세요\"];\r\n  } else {\r\n    if (isRuleNick(nickname)) {\r\n      return [true, \"사용 가능\"];\r\n    }\r\n    return [false, \"사용 불가능\"];\r\n  }\r\n};\r\n\r\nconst isRuleId = (asValue) => {\r\n  const regExp = /^[a-z]+[a-z0-9]{5,19}$/g;\r\n  return regExp.test(asValue);\r\n};\r\n\r\nconst isRulePassword = (asValue) => {\r\n  const regExp =\r\n    /^(?=.*[a-zA-z])(?=.*[0-9])(?=.*[$`~!@$!%*#^?&\\\\(\\\\)\\-_=+]).{8,16}$/;\r\n  return regExp.test(asValue);\r\n};\r\n\r\nconst isRuleNick = (asValue) => {\r\n  const regExp = /^[a-zA-Zㄱ-힣][a-zA-Zㄱ-힣]*$/;\r\n  return regExp.test(asValue);\r\n};\r\n"],"names":["UserSign","navigate","useNavigate","useState","id","password","checkPassword","nickname","isAgree","usrInputs","setUsrInputs","handleChange","e","target","value","name","onSubmit","preventDefault","alert","myData","loginId","passwordCheck","nickName","axios","then","response","data","status","message","catch","error","style","height","InputTextDesc","type","placeholder","onChange","onValidation","checkValidityId","required","checkValidityPassword","checkDoublePassword","checkValidityNickname","checked","htmlFor","Button","size","to","selected","setSelected","Title","SnsSelectTab","typeName","text","SnsLogin","length","isRuleId","isRulePassword","isRuleNick","asValue","test"],"sourceRoot":""}