{"version":3,"file":"static/js/624.3c0ebdf3.chunk.js","mappings":"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","sources":["components/Board/BoardFetchItems.jsx","assets/images/board_prev.svg","components/Slider/SliderCore/SliderButton.jsx","components/Slider/SliderCore/SliderSingleItem.jsx","components/Slider/SliderCore/SliderSingleMain.jsx","utils/Title/Title.jsx"],"sourcesContent":["// react hook , react\r\nimport { useState, useEffect, useRef } from \"react\";\r\n\r\n// recoil ( 상태관리 )\r\n\r\n// react library\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\n// styled-components , Style Files\r\nimport styled from \"styled-components\";\r\nimport BoardItemBox from \"./BoardStyle/ThreePowerForm\";\r\nimport BoardForm from \"./BoardStyle/BoardForm\";\r\n\r\n// Components\r\nimport LoadingSpinner from \"../Loding/LoadingSpinner\";\r\n\r\n// Icons , Images\r\n\r\n// Share , Utils\r\n\r\nexport default function BoardFetchItems({ category = \"\", center }) {\r\n  const { pathname } = useLocation();\r\n  const [itemList, setItemList] = useState([]);\r\n  const [page, setPage] = useState(0); //현재 페이지\r\n  const target = useRef();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  //옵저버 감시되어 타겟이 탐지되면 실행되는 함수\r\n  const onIntersect = async ([entry], observer) => {\r\n    //옵저버 감시영역에 들어옴\r\n    if (entry.isIntersecting) {\r\n      observer.unobserve(entry.target); //게시글 목록 맨 아래 타겟팅\r\n      setPage((page) => page + 1); //페이지 증가\r\n    }\r\n  };\r\n\r\n  let categoryPath = \"\";\r\n\r\n  //내게시글 목록은 뒤에 경로가 없어서 별도로 추가 경로설정 필요\r\n  if (category === \"user\") {\r\n    categoryPath = `${category}/post`;\r\n  } else {\r\n    categoryPath = `${category}`;\r\n  }\r\n\r\n  //옵저버로 증가시킨 pase 상태 적용해서 게시글 목록 api 요청\r\n  const getRequest = async (page) => {\r\n    setIsLoading(true);\r\n    return axios\r\n      .get(\r\n        `/api/${categoryPath}?page=${page}&size=${process.env.REACT_APP_PAGE_SIZE}`\r\n      )\r\n      .then(({ data }) => data.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(onIntersect, {\r\n      threshold: 0.5,\r\n    });\r\n    getRequest(page).then((items) => {\r\n      //서버에서 받아온 api데이터가 0보다 작은 경우에는 옵저버 실행시키지 않는다\r\n      if (items.length > 0) {\r\n        setItemList((prevItems) => [...prevItems, ...items]); //api로 받아온 게시글 목록 state에 데이터들 추가\r\n        observer.observe(target.current); // 타겟 엘리먼트 지정\r\n      }\r\n    });\r\n    return () => {\r\n      observer.disconnect(); //옵저버 제거\r\n    };\r\n  }, [page, category]);\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <BoardItemList>\r\n          {itemList.map(\r\n            ({\r\n              postId,\r\n              title,\r\n              createdDate,\r\n              nickname,\r\n              view,\r\n              urls,\r\n              postCategory,\r\n              thumbnailUrls,\r\n            }) => (\r\n              <Link\r\n                key={`${categoryPath}${postId}`}\r\n                to={\r\n                  category === \"user\"\r\n                    ? `/${postCategory}/${postId}`\r\n                    : `./${\r\n                        category === pathname.slice(1) ? \".\" : category\r\n                      }/${postId}`\r\n                }\r\n              >\r\n                <li>\r\n                  {(category === \"threepowerpost\") |\r\n                  (pathname === \"threepowerpost\") ? (\r\n                    <BoardItemBox\r\n                      id={postId}\r\n                      title={title}\r\n                      createdDate={createdDate}\r\n                      nickname={nickname}\r\n                      view={view}\r\n                      urls={urls}\r\n                      thumbnailUrls={thumbnailUrls}\r\n                    />\r\n                  ) : (\r\n                    <BoardForm\r\n                      id={postId}\r\n                      title={title}\r\n                      createdDate={createdDate}\r\n                      nickname={nickname}\r\n                      view={view}\r\n                      thumbnailUrls={thumbnailUrls}\r\n                      urls={urls}\r\n                    />\r\n                  )}\r\n                </li>\r\n              </Link>\r\n            )\r\n          )}\r\n          <div ref={target} style={{ width: \"100%\" }} />\r\n        </BoardItemList>\r\n      ) : (\r\n        <LoadingSpinner />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst BoardItemList = styled.ul`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  grid-column-gap: 15px;\r\n  grid-row-gap: 14px;\r\n  justify-content: center;\r\n`;\r\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgBoardPrev(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 8,\n    height: 14,\n    viewBox: \"0 0 8 14\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 1L7 7L1 13\",\n    stroke: \"#222222\",\n    strokeWidth: 1.2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgBoardPrev);\nexport default __webpack_public_path__ + \"static/media/board_prev.2cd642d734dacc92259b33da92997b91.svg\";\nexport { ForwardRef as ReactComponent };","// react hook , react\r\n\r\n// recoil ( 상태관리 )\r\n\r\n// react library\r\n\r\n// styled-components , Style Files\r\nimport styled, { css } from \"styled-components\";\r\nimport ArrowIcon from \"../../../assets/images/board_prev.svg\";\r\n\r\n// Components\r\n\r\n// Icons , Images\r\n\r\n// Share , Utils\r\n\r\nexport default function SliderButton({ direction, onClick, categories }) {\r\n  return (\r\n    <BtnSlideControl\r\n      onClick={onClick}\r\n      direction={direction ? 1 : 0}\r\n      categories={categories}\r\n    >\r\n      <img src={ArrowIcon} alt=\"슬라이드버튼\"></img>\r\n    </BtnSlideControl>\r\n  );\r\n}\r\n\r\nconst BtnSlideControl = styled.button`\r\n  position: absolute;\r\n  top: calc(50% - 30px);\r\n  z-index: 1;\r\n  background-color: white;\r\n  width: 30px;\r\n  height: 60px;\r\n  opacity: 0.5;\r\n  border: none;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  ${(props) =>\r\n    props.direction\r\n      ? css`\r\n          transform: rotate(180deg);\r\n          left: 1rem;\r\n        `\r\n      : css`\r\n          right: 1rem;\r\n        `};\r\n\r\n  ${(props) =>\r\n    props.categories === \"home\"\r\n      ? css`\r\n          padding: 20px 4px;\r\n          height: 60px;\r\n          border-radius: 15px;\r\n        `\r\n      : css`\r\n          padding: 0;\r\n          height: 30px;\r\n          border-radius: 50%;\r\n          top: 50%;\r\n        `};\r\n`;\r\n","// styled-components , Style Files\r\nimport styled from \"styled-components\";\r\n\r\nexport default function SliderSingleItem({ item, style, categories }) {\r\n  const slectSlide = {\r\n    home: <HomeItem item={item} categories={categories} />,\r\n    threepowerpost: <YoutubeItem item={item} />,\r\n    exercisepost: <CommercialItem item={item} />,\r\n    freepost: <CommercialItem item={item} />,\r\n  };\r\n\r\n  return (\r\n    <SliderItemInner style={style}>{slectSlide[categories]}</SliderItemInner>\r\n  );\r\n}\r\n\r\nfunction HomeItem({ item }) {\r\n  return (\r\n    <>\r\n      <a href=\"/\">\r\n        <ItemImg src={item} alt=\"\" />\r\n      </a>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction YoutubeItem({ item }) {\r\n  const { link, subscription, text, title, thumbnail } = item;\r\n\r\n  return (\r\n    <ItemInnerWrapper>\r\n      <InnerBox>\r\n        <a href={link} target=\"_blank\">\r\n          <InnderBoxTop>\r\n            <ThumbnailImg src={thumbnail} alt=\"유튜브 이미지 썸네일\" />\r\n            <BoxTopInfo>\r\n              <YoutubeTitle>{title}</YoutubeTitle>\r\n              <YoutubeSubscription>{subscription}</YoutubeSubscription>\r\n            </BoxTopInfo>\r\n          </InnderBoxTop>\r\n          <DescText>{text}</DescText>\r\n        </a>\r\n      </InnerBox>\r\n    </ItemInnerWrapper>\r\n  );\r\n}\r\n\r\nfunction CommercialItem({ item }) {\r\n  const { link, subTitle, text, title } = item;\r\n\r\n  return (\r\n    <ItemInnerWrapper>\r\n      <InnerBox>\r\n        <a href={link} target=\"_blank\">\r\n          <TitleText>{title}</TitleText>\r\n          <SubText>{subTitle}</SubText>\r\n          <DescText>{text}</DescText>\r\n        </a>\r\n      </InnerBox>\r\n    </ItemInnerWrapper>\r\n  );\r\n}\r\n\r\nconst SliderItemInner = styled.li`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n`;\r\n\r\nconst ItemImg = styled.img`\r\n  display: flex;\r\n  margin: 0 auto;\r\n  height: 450px;\r\n  /* object-fit: scale-down; */\r\n  @media screen and (max-width: 1440px) {\r\n    width: 1440px;\r\n  }\r\n  @media screen and (max-width: 1024px) {\r\n    width: 1000px;\r\n  }\r\n  @media screen and (max-width: 600px) {\r\n    width: 600px;\r\n  }\r\n`;\r\n\r\nconst ItemInnerWrapper = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst ThumbnailImg = styled.img`\r\n  width: 68px;\r\n  height: 68px;\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst YoutubeTitle = styled.div`\r\n  font-weight: 700;\r\n  font-size: 18px;\r\n  line-height: 26px;\r\n  color: #ffffff;\r\n`;\r\n\r\nconst YoutubeSubscription = styled.div`\r\n  font-size: 14px;\r\n  line-height: 22px;\r\n  color: #ffffff;\r\n`;\r\n\r\nconst DescText = styled.div`\r\n  width: 400px;\r\n  font-weight: 400;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  color: #ffffff;\r\n`;\r\n\r\nconst InnderBoxTop = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst BoxTopInfo = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-left: 12px;\r\n`;\r\n\r\nconst InnerBox = styled.div`\r\n  padding: 40px 60px;\r\n`;\r\n\r\nconst TitleText = styled.div`\r\n  font-weight: 700;\r\n  font-size: 36px;\r\n  line-height: 44px;\r\n  color: #ffffff;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst SubText = styled.div`\r\n  font-weight: 700;\r\n  font-size: 18px;\r\n  line-height: 26px;\r\n  color: #ffffff;\r\n  margin-bottom: 8px;\r\n`;\r\n","// react hook , react\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\n\r\n// recoil ( 상태관리 )\r\n\r\n// react library\r\n\r\n// styled-components , Style Files\r\nimport styled, { css } from \"styled-components\";\r\n\r\n// Components\r\nimport SliderSingleItem from \"./SliderSingleItem\";\r\nimport SliderButton from \"./SliderButton\";\r\n\r\n// Icons , Images\r\n\r\n// Share , Utils\r\n\r\nexport default function SliderSingleMain({ data, categories }) {\r\n  const [width, setWidth] = useState(0);\r\n  const [currentOrder, setCurrentOrder] = useState(0); //현재 슬라이드의 index를 저장(0에서부터 슬라이드 움직이는 개수만큼 +1싹 무한정으로 커짐)\r\n\r\n  //왼쪽, 오른쪽 버튼 클릭 이벤트\r\n  const handleSwipe = (direction) => {\r\n    setCurrentOrder((prev) => prev + direction); //인덱스와 왼쪽 오른쪽 방향 조정 direction(양수인 경우 오른쪽, 음수인경우 왼쪽) 이동\r\n  };\r\n\r\n  useEffect(() => {\r\n    //브라우저 사이즈에 맞게 너비 갱신 함수\r\n    const handleResize = () => {\r\n      setWidth(ref.current.clientWidth);\r\n    };\r\n    handleResize();\r\n    window.addEventListener(\"resize\", handleResize); //브라우저 리사이즈 이벤트 발생시 width 상태값 갱신\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize); //resize 함수 resize 이벤트가 계속 누적 방지\r\n    };\r\n  }, []);\r\n\r\n  //idx가 0보다 작은 경우(왼쪽 끝 범위 초과) 0반환\r\n  //idx가 데이터 길이보다 큰 경우(오른쪽 끝 범위 초과), 오른쪽 끝 처리\r\n  //아닌 경우 현제 인덱스 유지\r\n  const isOver = (idx) =>\r\n    idx < 0 ? 0 : idx >= data.length ? data.length - 1 : idx; //0보다 작은 경우\r\n\r\n  useEffect(() => {\r\n    // setInterval 삽입하여 2초마다 setCurrentOrder 실행\r\n    const timer = setInterval(() => {\r\n      setCurrentOrder((prev) => prev + 1);\r\n    }, 2000);\r\n\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [currentOrder]);\r\n\r\n  const ref = useRef();\r\n  const nowIdx = Math.floor(currentOrder % data.length); //현재 인덱스 아이템의 개수로 나머지로 현재 보여줄 컨텐츠 조정\r\n\r\n  //현재 보여주는 슬라이드 컨텐츠보다 앞에 있는 아이템\r\n  const startSlides = [3, 2, 1] //보여줘야할 currrentIndex보다 얼마나 멀리 떨어져 있는 지 나타냄\r\n    .map((num) => {\r\n      const nextIdx = nowIdx >= 0 ? nowIdx - num : data.length + nowIdx - num;\r\n\r\n      //현재 인덱스가 맨 왼쪽인 경우(0보다 작은 경우) 다음 인덱스는 맨 뒤로 이동\r\n      if (nextIdx < 0) {\r\n        return data.length - Math.abs(nextIdx);\r\n      }\r\n      return nextIdx;\r\n    })\r\n    .map((num) => data[isOver(num)]);\r\n\r\n  //현재 보여주는 슬라이드 컨텐츠보다 뒤에 있는 아이템\r\n  const endSlides = [1, 2, 3] //보여줘야할 currrentIndex보다 얼마나 멀리 떨어져 있는 지 나타냄\r\n    .map((num) => {\r\n      const nextIdx = nowIdx >= 0 ? nowIdx + num : data.length + nowIdx + num;\r\n\r\n      //현재 인덱스가 맨 오른쪽인 경우(길이보다 큰 경우) 다음 인덱스는 맨 앞으로 이동\r\n      if (nextIdx < data.length) {\r\n        return nextIdx < 0 ? 0 : nextIdx;\r\n      }\r\n      return Math.abs(data.length - nextIdx);\r\n    })\r\n    .map((num) => data[isOver(num)]);\r\n\r\n  return (\r\n    <SliderArea ref={ref}>\r\n      <Slider className=\"slider\">\r\n        <SliderButton\r\n          direction={true}\r\n          onClick={() => handleSwipe(-1)} //왼쪽 <- 이동\r\n          categories={categories}\r\n        />\r\n        <SliderButton\r\n          direction={false}\r\n          onClick={() => handleSwipe(1)} //오른쪽 -> 이동\r\n          categories={categories}\r\n        />\r\n        <SliderLists\r\n          categories={categories}\r\n          className=\"slider-list\"\r\n          style={{\r\n            transform: `translate3d(${-currentOrder * width}px, 0px, 0px)`,\r\n            transition: \"all ease 0.4s\",\r\n          }}\r\n        >\r\n          {/* 현재 슬라이드보다 왼쪽에 있는 컨텐츠 */}\r\n          {startSlides.map((item, idx) => (\r\n            <SliderSingleItem\r\n              key={currentOrder - 3 + idx}\r\n              item={item}\r\n              style={{\r\n                width,\r\n                left: (currentOrder - 3 + idx) * width, //슬라이드 순서에서 아이템 개수만큼 떨어져있는 숫자를 빼주고, i만큼\r\n              }}\r\n              categories={categories}\r\n            />\r\n          ))}\r\n          {/* 현재 슬라이트 컨텐츠 */}\r\n          <SliderSingleItem\r\n            key={currentOrder}\r\n            item={data[nowIdx >= 0 ? nowIdx : data.length + nowIdx]}\r\n            style={{\r\n              width,\r\n              left: currentOrder * width,\r\n            }}\r\n            categories={categories}\r\n          />\r\n          {/* 현재 슬라이드보다 오른쪽에 있는 컨텐츠 */}\r\n          {endSlides.map((item, idx) => (\r\n            <SliderSingleItem\r\n              key={currentOrder + idx + 1}\r\n              item={item}\r\n              style={{\r\n                width,\r\n                left: (currentOrder + idx + 1) * width, //현재 인덱스 +\r\n              }}\r\n              categories={categories}\r\n            />\r\n          ))}\r\n        </SliderLists>\r\n\r\n        <SliderPagenation>\r\n          <SliderPagenationList>\r\n            {data.map((item, num) => {\r\n              const target = nowIdx >= 0 ? nowIdx : data.length + nowIdx; //음수일 때는, 데이터 랭스에서 더함-> 음순니까 빼기된다.\r\n              return (\r\n                <SliderPageButton\r\n                  key={num}\r\n                  onClick={() => {\r\n                    setCurrentOrder(currentOrder - (target - num));\r\n                  }}\r\n                  className={num === target ? \"active\" : \"\"}\r\n                  isActive={num === target}\r\n                />\r\n              );\r\n            })}\r\n          </SliderPagenationList>\r\n        </SliderPagenation>\r\n      </Slider>\r\n    </SliderArea>\r\n  );\r\n}\r\n\r\nconst SliderArea = styled.div`\r\n  position: relative;\r\n  display: block;\r\n  overflow: hidden;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 1;\r\n`;\r\n\r\nconst Slider = styled.div`\r\n  overflow: hidden;\r\n`;\r\n\r\nconst SliderLists = styled.ul`\r\n  position: relative;\r\n  display: flex;\r\n  list-style: none;\r\n  padding: 0px;\r\n  height: 450px;\r\n  height: ${(props) => (props.categories ? \"450px\" : \"225px\")};\r\n`;\r\n\r\nconst SliderPagenation = styled.ul`\r\n  position: absolute;\r\n  top: auto;\r\n  right: auto;\r\n  bottom: 16px;\r\n  left: 0;\r\n  display: block;\r\n  width: 100%;\r\n  white-space: nowrap;\r\n  text-align: center;\r\n`;\r\n\r\nconst SliderPagenationList = styled.li`\r\n  display: flex;\r\n  justify-content: center;\r\n  vertical-align: top;\r\n`;\r\n\r\nconst SliderPageButton = styled.button`\r\n  border: 0;\r\n  display: block;\r\n  width: 8px;\r\n  height: 8px;\r\n  color: transparent;\r\n  border-radius: 4px;\r\n  background: #fff;\r\n  font-size: 0;\r\n  opacity: 0.8;\r\n  -webkit-transition: all 0.3s ease;\r\n  -o-transition: all 0.3s ease;\r\n  transition: all 0.3s ease;\r\n  margin: 0 0 0 12px;\r\n  cursor: pointer;\r\n\r\n  ${(props) =>\r\n    props.isActive &&\r\n    css`\r\n      width: 36px;\r\n      opacity: 1;\r\n    `};\r\n`;\r\n","// react library\r\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\r\n\r\nexport default function Title({ name }) {\r\n  return (\r\n    <HelmetProvider>\r\n      <Helmet>\r\n        <title>Health | {name}</title>\r\n      </Helmet>\r\n    </HelmetProvider>\r\n  );\r\n}\r\n"],"names":["BoardFetchItems","category","pathname","center","useLocation","useState","itemList","setItemList","page","setPage","target","useRef","isLoading","setIsLoading","onIntersect","observer","entry","isIntersecting","unobserve","categoryPath","getRequest","axios","process","then","data","useEffect","IntersectionObserver","threshold","items","length","prevItems","observe","current","disconnect","BoardItemList","map","postId","title","createdDate","nickname","view","urls","postCategory","thumbnailUrls","to","slice","id","ref","style","width","styled","SliderButton","direction","onClick","categories","BtnSlideControl","src","ArrowIcon","alt","props","css","SliderSingleItem","item","slectSlide","home","HomeItem","threepowerpost","YoutubeItem","exercisepost","CommercialItem","freepost","SliderItemInner","href","ItemImg","link","subscription","text","thumbnail","ItemInnerWrapper","InnerBox","InnderBoxTop","ThumbnailImg","BoxTopInfo","YoutubeTitle","YoutubeSubscription","DescText","subTitle","TitleText","SubText","SliderSingleMain","setWidth","currentOrder","setCurrentOrder","handleSwipe","prev","handleResize","clientWidth","window","addEventListener","removeEventListener","isOver","idx","timer","setInterval","clearInterval","nowIdx","Math","floor","startSlides","num","nextIdx","abs","endSlides","SliderArea","Slider","className","SliderLists","transform","transition","left","SliderPagenation","SliderPagenationList","SliderPageButton","isActive","Title","name"],"sourceRoot":""}